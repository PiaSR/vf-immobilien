---
// PropertyGrid.astromport PropertyCard from "./PropertyCard.astro";
import { sanityClient } from "../../../lib/sanityClient"; // Ensure this path is correct

// Define the structure of a simplified property object returned by GROQ
interface InitialProperty {
  slug: string;
  title: string;
  location: string; // The combined location string for display
  area: number; // Wohnflaeche
  rooms: number; // Zimmer
  price: number; // mietpreis or kaufpreis, based on marketingType
  marketingType: "Miete" | "Kauf";
  imageUrl: string; // URL for the main image
}
// ... rest of your GROQ query and data fetching logic ...
const initialPropertiesQuery = `
    *[_type == "property"] | order(title asc) {
      "slug": slug.current,
      title,
      // FIX 1: Use 'title' from the referenced category document
      "marketingType": marketingType->title, 
      purchasePrice,
      rentalPrice,
      livingArea,
      rooms, 
      // FIX 2: Use 'title' and ensure capitalization matches your Sanity data ('Miete'/'Kauf')
      "price": select(
        marketingType->title == "Miete" => rentalPrice, // CAPITALIZED 'Miete'
        marketingType->title == "Kauf" => purchasePrice, // CAPITALIZED 'Kauf'
        true => rentalPrice // Default
      ),
      "imageUrl": mainImage.asset->url,
      "location": coalesce(locationVienna, locationSurrounding) 
    }
`;

let initialProperties: InitialProperty[] = [];
try {
  initialProperties = await sanityClient.fetch<InitialProperty[]>(
    initialPropertiesQuery
  );
} catch (error) {
  console.error("Error fetching initial properties:", error);
  // In case of error, the array remains empty.
}

// Replace the entire formatDataForClient function in PropertyGrid.astro with this:
const formatDataForClient = (properties: InitialProperty[]) => {
  return properties.map((p) => ({
    slug: p.slug,
    title: p.title,
    location: p.location || "Unbekannt",
    // FIX 2A: Use p.livingArea (from GROQ result) -> map to area
    area: p.livingArea || 0,
    // FIX 2B: Use p.rooms (from GROQ result) -> map to rooms
    rooms: p.rooms || 0,
    price: p.price || 0,
    marketingType: p.marketingType || "kauf",
    imageUrl: p.imageUrl || "/assets/placeholder-default.jpg",
  }));
};
const propertiesJson = JSON.stringify(formatDataForClient(initialProperties));

console.log("JSON Data:", propertiesJson);
---

<section id="properties-grid-section" class="property-grid-section">
  <div class="padding-section site-container">
    <div
      id="property-list-container"
      class="property-grid-list"
      data-properties={propertiesJson}
    >
      <p class="loading-message">Lade Immobilien...</p>
    </div>

    <div
      id="no-results-message"
      class="no-results-message"
      style="display:none;"
    >
      Es wurden keine Immobilien gefunden, die Ihren Kriterien entsprechen.
    </div>
  </div>
</section>

<script is:inline>
document.addEventListener("DOMContentLoaded", () => {
	const container = document.getElementById("property-list-container");
	const noResultsMessage = document.getElementById("no-results-message");

	if (!container || !noResultsMessage) return; // Basic safety check

	// ðŸ’¡ READ ALL DATA FROM ATTRIBUTES
	const propertiesJsonString = container.getAttribute("data-properties");
	const LOCATION_SVG = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" viewBox="0 0 16 20">
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M15.5 8.334c0 5.833-7.5 10.833-7.5 10.833s-7.5-5-7.5-10.834a7.5 7.5 0 0 1 15 0Z" transform="translate(.5 0.167)"/>
    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="M8 10.834a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z" transform="translate(.5 -1.167)"/>
</svg>`;

	// FIX 2: Standardize width, height, and use currentColor for CSS control
	const SQM_SVG = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path d="M7.44 11.28a.48.48 0 0 1-.48.48H5.04a.48.48 0 0 1 0-.96h1.92a.48.48 0 0 1 .48.48ZM.72 7.44a.48.48 0 0 0 .48-.48V5.04a.48.48 0 1 0-.96 0v1.92c0 .265.215.48.48.48Zm1.92 3.36H1.2V9.36a.48.48 0 1 0-.96 0v1.44c0 .53.43.96.96.96h1.44a.48.48 0 1 0 0-.96Zm9.12-9.6a.96.96 0 0 0-.96-.96H1.2a.952.952 0 0 0-.713.32.952.952 0 0 0-.247.64v1.44a.48.48 0 0 0 .96 0v-.761l8.922 8.921H9.36a.48.48 0 1 0 0 .96h1.44a.955.955 0 0 0 .714-.32.952.952 0 0 0 .246-.64V1.2Z"/></svg>`;

	// FIX 3: Placeholder for Room SVG - REMOVE DATA-IMAGE and use simple path/viewBox
	const ROOM_SVG = `<svg xmlns="http://www.w3.org/2000/svg" height="16" viewBox="0 -960 960 960" width="16" fill="currentColor"><path d="M120-120v-80h80v-560q0-33 23.5-56.5T280-840h400q33 0 56.5 23.5T760-760v560h80v80H120Zm560-80v-560H280v560h400ZM560-440q17 0 28.5-11.5T600-480q0-17-11.5-28.5T560-520q-17 0-28.5 11.5T520-480q0 17 11.5 28.5T560-440ZM280-760v560-560Z"/></svg>`;

	let initialPropertiesData = [];
	try {
		if (propertiesJsonString) {
			initialPropertiesData = JSON.parse(propertiesJsonString);
		}
	} catch (e) {
		console.error("Failed to parse initial property data from attribute:", e);
		// Fallback to empty array
	}

	// Simple function to format currency (must match the Astro component logic)
	const formatPrice = (price) => {
		// ... formatPrice function code ...
		return new Intl.NumberFormat("de-DE", {
			style: "currency",
			currency: "EUR",
			maximumFractionDigits: 0,
		})
			.format(price)
			.replace("â‚¬", "")
			.trim();
	};

	// Function to render the property card HTML
	const renderPropertyCard = (property) => {
		const priceSuffix = property.marketingType === "Miete" ? "/Monat" : "";
		const formattedPrice = formatPrice(property.price);

		return `
					<a href="/property/${property.slug}" class="property-card-link">
						<div class="property-card-wrapper">
							<div class="property-card-image-box">

								<img

								src="${property.imageUrl}"

								loading="lazy"

								alt="${property.title}"

								class="property-card-image"

								/>

							</div>
							<div class="property-card-info-wrapper">
								<div class="property-card-location-wrapper">
								   <div class="location-icon-wrapper">${LOCATION_SVG} </div>
									<div class="property-card-address ">${property.location}</div>
								</div>
								
								<h3 class="heading-style-h5 property-card-heading">${property.title}</h3>
					
								<div class="property-card-icons-wrapper">
									<div class="property-card-icon-text">
										<div class="detail-icon-wrapper">${SQM_SVG} </div>
										<div class="icon-p">${property.area} qm</div>
									</div>
									
									<div class="property-card-icon-text">
										<div class="detail-icon-wrapper">${ROOM_SVG} </div>
										<div class="icon-p">${property.rooms} Zimmer</div>
									</div>
								</div>
								
					
								<div class="property-icon-price-wrapper">
									<div class="price-value">â‚¬ ${formattedPrice}</div>
									<div class="price-suffix ">${priceSuffix}</div>
								</div>
							</div>
						</div>
					</a>
				`;
	};

	// --- Initial Render ---
	const initialRender = () => {
		// ... initialRender function code ...
		container.innerHTML = ""; // Clear the "Lade Immobilien..." message

		if (initialPropertiesData && initialPropertiesData.length > 0) {
			initialPropertiesData.forEach((property) => {
				container.insertAdjacentHTML(
					"beforeend",
					renderPropertyCard(property)
				);
			});
			noResultsMessage.style.display = "none";
		} else {
			noResultsMessage.style.display = "block";
		}
	};

	// Execute the initial render
	initialRender();
	console.log("initial render executed");

	// --- Global function for Filter Form to call after AJAX search ---
	window.renderPropertyCards = (properties) => {
		console.log("--- RENDER CARDS START ---");
		console.log("Filtered properties received:", properties); // Check the data count
		// debugger; // This will pause execution when the filter button is pressed.
		container.innerHTML = "";
		if (properties.length > 0) {
			properties.forEach((property) => {
				container.insertAdjacentHTML(
					"beforeend",
					renderPropertyCard(property)
				);
			});
			noResultsMessage.style.display = "none";
		} else {
			noResultsMessage.style.display = "block";
		}
	};
});
</script>

<style>
  /* --- PROPERTY GRID LAYOUT--- */

  .property-grid-section {
    padding: var(--spacing-lg) 0;
    background-color: var(--color-brand-light-green);
  }

  .section-padding {
    padding: var(--spacing-lg);
  }

  /* Default (Mobile First): 1 Column for screens up to 767px */
  .property-grid-list {
    display: grid;
    grid-template-columns: repeat(1, 1fr); /* 1 Column default */
    gap: var(--spacing-2xl);
  }

  /* ------------------------------------------------ */
  /* Medium Screens (Tablets): 2 Columns */
  /* Starts applying at 768 pixels wide */
  @media (min-width: 768px) {
    .property-grid-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* ------------------------------------------------ */
  /* Large Screens (Desktops): 3 Columns */
  /* Starts applying at 1024 pixels wide */
  @media (min-width: 1024px) {
    .property-grid-list {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1280px) {
    .property-grid-list {
      grid-template-columns: repeat(4, 1fr);
    }
  }
</style>
