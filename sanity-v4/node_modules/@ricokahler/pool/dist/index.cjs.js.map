{"version":3,"file":"index.cjs.js","sources":["../index.ts"],"sourcesContent":["interface PoolOptions<T, R> {\n  /**\n   * The input collection that will feed the tasks\n   */\n  readonly collection: readonly T[];\n  /**\n   * A function that takes an item from the collection and returns a result\n   */\n  readonly task: (t: T, index: number) => Promise<R>;\n  /**\n   * The max number of concurrent tasks. If not provided, all tasks are ran at\n   * once\n   */\n  readonly maxConcurrency?: number;\n}\n\n/**\n * Like `Promise.all` but you can specify how many concurrent tasks you want at once.\n */\nasync function pool<T, R>({\n  collection,\n  task,\n  maxConcurrency,\n}: PoolOptions<T, R>): Promise<R[]> {\n  if (!maxConcurrency) {\n    return Promise.all(collection.map((item, i) => task(item, i)));\n  }\n\n  if (!collection.length) {\n    return [];\n  }\n\n  const results: Array<[R, number]> = [];\n  const mutableCollection = collection.map((t, i) => [t, i] as [T, number]);\n\n  let available = maxConcurrency;\n  let done = false;\n  let globalResolve!: () => void;\n  let globalReject!: (err: Error) => void;\n  const finalPromise = new Promise<void>((resolve, reject) => {\n    globalResolve = resolve;\n    globalReject = reject;\n  });\n\n  const listeners = new Set<() => void>();\n  function notify() {\n    for (const listener of listeners) {\n      listener();\n    }\n  }\n  function ready() {\n    return new Promise<void>((resolve) => {\n      const listener = () => {\n        if (done) {\n          listeners.delete(listener);\n          resolve();\n        } else if (available > 0) {\n          listeners.delete(listener);\n          available -= 1;\n          resolve();\n        }\n      };\n\n      listeners.add(listener);\n      notify();\n    });\n  }\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const value = mutableCollection.shift();\n    if (!value) break;\n    if (done) break;\n\n    const [t, i] = value;\n\n    await ready();\n\n    task(t, i)\n      .then((r) => {\n        results.push([r, i]);\n        available += 1;\n\n        if (results.length === collection.length) {\n          done = true;\n          globalResolve();\n        }\n      })\n      .catch((e) => {\n        done = true;\n        globalReject(e);\n      })\n      .finally(notify);\n  }\n\n  await finalPromise;\n\n  return results\n    .slice()\n    .sort(([, a], [, b]) => a - b)\n    .map(([r]) => r);\n}\n\nexport default pool;\n"],"names":["pool","collection","task","maxConcurrency","Promise","all","map","item","i","length","results","mutableCollection","t","available","done","globalResolve","globalReject","finalPromise","resolve","reject","listeners","Set","notify","listener","ready","delete","add","value","shift","then","r","push","catch","e","finally","slice","sort","a","b"],"mappings":"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"}