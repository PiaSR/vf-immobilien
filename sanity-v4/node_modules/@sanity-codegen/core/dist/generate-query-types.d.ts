/// <reference types="@sanity-codegen/types/extractor" />
/// <reference types="@sanity-codegen/types/common" />
import * as t from '@babel/types';
interface GenerateQueryTypesOptions {
    normalizedSchema: Sanity.SchemaDef.Schema;
    substitutions: {
        [hash: string]: t.TSType;
    };
    extractedQueries: Array<{
        queryKey: string;
        query: string;
    }>;
    /**
     * optionally override the default logger (e.g. to silence it, etc)
     */
    logger?: Sanity.Codegen.Logger;
}
export declare function generateQueryTypes({ normalizedSchema, extractedQueries, ...options }: GenerateQueryTypesOptions): {
    declarations: {
        _ClientConfig: t.TSModuleDeclaration;
    };
    substitutions: {
        [key: string]: t.TSType;
    };
};
export {};
//# sourceMappingURL=generate-query-types.d.ts.map