"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accessAttributeInStructure = accessAttributeInStructure;
var _createStructure = require("./create-structure");
var _isStructure = require("./is-structure");
var _transforms = require("./transforms");
var _wrapArray = require("./wrap-array");
function accessAttributeInStructure(node, attributeName) {
  switch (node.type) {
    case 'And':
    case 'Or':
      {
        return (0, _createStructure.createStructure)({
          ...node,
          children: node.children.map(child => accessAttributeInStructure(child, attributeName))
        });
      }
    case 'Object':
      {
        const matchingProperty = node.properties.find(property => property.key === attributeName);
        if (!matchingProperty) return {
          type: 'Unknown',
          hash: 'unknown'
        };
        if ((0, _isStructure.isStructureOptional)(matchingProperty.value)) {
          return (0, _transforms.removeOptional)((0, _transforms.addNull)(matchingProperty.value));
        }
        return matchingProperty.value;
      }
    case 'Array':
      {
        return (0, _wrapArray.wrapArray)(accessAttributeInStructure((0, _transforms.unwrapArray)(node.of), attributeName), {
          canBeNull: (0, _isStructure.isStructureNull)(node),
          canBeOptional: (0, _isStructure.isStructureOptional)(node)
        });
      }
    case 'Lazy':
      {
        return (0, _createStructure.createStructure)({
          type: 'Lazy',
          get: () => accessAttributeInStructure(node.get(), attributeName),
          hashNamespace: 'AccessAttributeInStructure',
          hashInput: node.hash
        });
      }
    case 'Reference':
      {
        return accessAttributeInStructure(node.to, attributeName);
      }
    default:
      {
        return {
          type: 'Unknown',
          hash: 'unknown'
        };
      }
  }
}