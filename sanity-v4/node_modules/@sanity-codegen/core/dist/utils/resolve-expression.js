"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveExpression = resolveExpression;
var t = _interopRequireWildcard(require("@babel/types"));
var _fs = _interopRequireDefault(require("fs"));
var _core = require("@babel/core");
var _generator = _interopRequireDefault(require("@babel/generator"));
var _pool = _interopRequireDefault(require("@ricokahler/pool"));
var _resolveIdentifier = require("./resolve-identifier");
var _resolveExpressionError = require("../resolve-expression-error");
var _boundedFind = require("./bounded-find");
var _getNextFilename = require("./get-next-filename");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const staticPluckerNotice = `Note: the current GROQ plucker can only extract static values from your ` + `source code with very limited support for resolving template ` + `expressions. See here for more info:\n` + `https://github.com/ricokahler/sanity-codegen/tree/alpha/packages/core#expression-support`;
function tryStringifyNode(node) {
  try {
    return ` \`${(0, _generator.default)(node).code}\``;
  } catch {
    return '';
  }
}
async function resolveExpression({
  node,
  file,
  scope,
  filename,
  resolvePluckedFile,
  parseSourceFile
}) {
  if (t.isTaggedTemplateExpression(node)) {
    return await resolveExpression({
      node: node.quasi,
      file,
      scope,
      filename,
      parseSourceFile,
      resolvePluckedFile
    });
  }
  if (t.isTemplateLiteral(node)) {
    const resolvedExpressions = await (0, _pool.default)({
      collection: node.expressions,
      task: nestedExpression => resolveExpression({
        node: nestedExpression,
        file,
        scope,
        filename,
        parseSourceFile,
        resolvePluckedFile
      }),
      maxConcurrency: 1
    });
    return node.quasis.map((quasi, index) => `${quasi.value.cooked || ''}${resolvedExpressions[index] || ''}`).join('');
  }
  if (t.isVariableDeclarator(node)) {
    if (!node.init) {
      throw new _resolveExpressionError.ResolveExpressionError(`Could not resolve variable declarator${tryStringifyNode(node.id)}.`);
    }
    return resolveExpression({
      node: node.init,
      file,
      scope,
      filename,
      parseSourceFile,
      resolvePluckedFile
    });
  }
  if (t.isLiteral(node)) {
    if ('value' in node) {
      return node.value.toString();
    }
    throw new _resolveExpressionError.ResolveExpressionError(`Could not get value from literal${tryStringifyNode(node)}.`);
  }
  if (t.isIdentifier(node)) {
    const result = await (0, _resolveIdentifier.resolveIdentifier)({
      identifierName: node.name,
      file,
      scope,
      filename,
      parseSourceFile,
      resolvePluckedFile
    });
    return resolveExpression({
      node: result.node,
      file: result.file,
      filename: result.filename,
      scope: result.scope,
      parseSourceFile,
      resolvePluckedFile
    });
  }
  if (t.isMemberExpression(node)) {
    const {
      object,
      property
    } = node;
    if (!t.isIdentifier(object) || !t.isIdentifier(property)) {
      throw new _resolveExpressionError.ResolveExpressionError(`Unable to resolve member expression${tryStringifyNode(node)} in ${filename}\n ${staticPluckerNotice}`);
    }
    const importStarImportDeclaration = (0, _boundedFind.boundedFind)(resolve => {
      (0, _core.traverse)(file, {
        ImportDeclaration(n) {
          for (const specifier of n.node.specifiers) {
            if (specifier.local.name === object.name) {
              resolve(n.node);
            }
          }
        }
      });
    });
    if (importStarImportDeclaration) {
      const nextFilename = await (0, _getNextFilename.getNextFilename)({
        currentFilename: filename,
        targetFilename: importStarImportDeclaration.source.value,
        resolvePluckedFile
      });
      const source = await _fs.default.promises.readFile(nextFilename);
      const nextFile = parseSourceFile(source.toString(), nextFilename);
      const nextScope = (0, _boundedFind.boundedFind)(resolve => {
        (0, _core.traverse)(nextFile, {
          Program(n) {
            resolve(n.scope);
          }
        });
      });
      const result = await (0, _resolveIdentifier.resolveIdentifier)({
        identifierName: property.name,
        file: nextFile,
        scope: nextScope,
        filename: nextFilename,
        parseSourceFile,
        resolvePluckedFile
      });
      return resolveExpression({
        node: result.node,
        file: result.file,
        filename: result.filename,
        scope: result.scope,
        parseSourceFile,
        resolvePluckedFile
      });
    }
  }
  throw new _resolveExpressionError.ResolveExpressionError(`Unable to resolve query expression${tryStringifyNode(node)} in ${filename}\n ${staticPluckerNotice}`);
}