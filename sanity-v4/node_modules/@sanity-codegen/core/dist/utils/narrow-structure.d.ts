/// <reference types="@sanity-codegen/types/core" />
import type { parse } from 'groq-js';
type ExprNode = ReturnType<typeof parse>;
type LogicExprNode = {
    type: 'And';
    children: LogicExprNode[];
    hash: string;
} | {
    type: 'Or';
    children: LogicExprNode[];
    hash: string;
} | {
    type: 'Not';
    child: LogicExprNode;
    hash: string;
} | {
    type: 'Literal';
    value: boolean;
    hash: 'true' | 'false';
} | {
    type: 'SingleVariableEquality';
    variable: string;
    literal: string | number;
    hash: string;
} | {
    type: 'UnknownExpression';
    originalExprNode: ExprNode;
    hash: 'unknown';
};
/**
 * An internal function that takes in an GROQ ExprNode and returns a normalized
 * `LogicExprNode` node used to evaluate against a set of types described by a
 * `StructureNode`
 *
 * @see `accept`
 */
export declare function transformExprNodeToLogicExpr(groqNode: ExprNode): LogicExprNode;
export declare const accept: (structure: Sanity.GroqCodegen.StructureNode, condition: LogicExprNode, visitedNodes: Set<string>) => 'yes' | 'no' | 'unknown';
export declare function narrowStructure(node: Sanity.GroqCodegen.StructureNode, condition: ExprNode): Sanity.GroqCodegen.StructureNode;
export {};
//# sourceMappingURL=narrow-structure.d.ts.map