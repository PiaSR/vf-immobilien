"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isStructureString = exports.isStructureOptional = exports.isStructureObject = exports.isStructureNumber = exports.isStructureNull = exports.isStructureBoolean = exports.isStructureArray = void 0;
function createIsStructure({
  accept,
  mode
}) {
  const cache = new Map();
  function is(node, visitedNodes) {
    if (node.type === 'Lazy') {
      const got = node.get();
      if (visitedNodes.has(got.hash)) return false;
      return is(got, new Set([...visitedNodes, got.hash]));
    }
    if (node.type === 'And' || node.type === 'Or') {
      return node.children[mode](child => is(child, visitedNodes));
    }
    return !!accept(node);
  }
  return function isStructure(structure) {
    if (cache.has(structure.hash)) return cache.get(structure.hash);
    const result = is(structure, new Set());
    cache.set(structure.hash, result);
    return result;
  };
}
const isStructureNumber = createIsStructure({
  accept: n => n.type === 'Number',
  mode: 'every'
});
exports.isStructureNumber = isStructureNumber;
const isStructureString = createIsStructure({
  accept: n => n.type === 'String',
  mode: 'every'
});
exports.isStructureString = isStructureString;
const isStructureBoolean = createIsStructure({
  accept: n => n.type === 'Boolean',
  mode: 'every'
});
exports.isStructureBoolean = isStructureBoolean;
const isStructureArray = createIsStructure({
  accept: n => ['Array', 'Tuple'].includes(n.type),
  mode: 'every'
});
exports.isStructureArray = isStructureArray;
const isStructureNull = createIsStructure({
  accept: n => n.type === 'Unknown' ? false : n.canBeNull,
  mode: 'some'
});
exports.isStructureNull = isStructureNull;
const isStructureOptional = createIsStructure({
  accept: n => n.type === 'Unknown' ? false : n.canBeOptional,
  mode: 'some'
});
exports.isStructureOptional = isStructureOptional;
const isStructureObject = createIsStructure({
  accept: n => n.type === 'Object',
  mode: 'every'
});
exports.isStructureObject = isStructureObject;