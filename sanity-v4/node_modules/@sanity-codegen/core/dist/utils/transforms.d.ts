/// <reference types="@sanity-codegen/types/core" />
type StructureNode = Sanity.GroqCodegen.StructureNode;
type LeafNode = Exclude<StructureNode, {
    type: 'And' | 'Or' | 'Lazy';
}>;
interface Params<R extends LeafNode> {
    namespace: string;
    accept?: (node: LeafNode) => boolean;
    transform: (node: R) => StructureNode;
}
export declare function createTransform<R extends LeafNode>({ namespace, accept, transform: transformLeaf, }: Params<R>): (node: StructureNode) => StructureNode;
export declare const addNull: (node: StructureNode) => StructureNode;
export declare const addOptional: (node: StructureNode) => StructureNode;
export declare const addOptionalToProperties: (node: StructureNode) => StructureNode;
export declare const removeOptional: (node: StructureNode) => StructureNode;
export declare const unwrapArray: (node: StructureNode) => Sanity.GroqCodegen.StructureNode;
export declare const unwrapReferences: (node: StructureNode) => StructureNode;
export {};
//# sourceMappingURL=transforms.d.ts.map