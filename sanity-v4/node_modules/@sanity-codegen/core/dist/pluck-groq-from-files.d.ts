/// <reference types="@sanity-codegen/types/common" />
export interface PluckGroqFromSourceOptions {
    /**
     * The contents of the source file to pluck GROQ queries from.
     */
    source: string;
    /**
     * An incoming filename. This is sent to babel and the pathname is also used
     * to resolve relative files
     */
    filename: string;
    /**
     * The template tag to look for when plucking GROQ queries. Defaults to
     * `groq`.
     */
    groqTagName?: string;
    /**
     * Babel options configuration object that is merged with a provided default
     * configuration.
     */
    babelOptions?: Record<string, unknown>;
    /**
     * A function used to resolve imports across different files. Defaults to
     * `require.resolve` (Note: babel is registered so `require.resolve` requests
     * will go through babel).
     */
    resolvePluckedFile?: (request: string) => string | Promise<string>;
    /**
     * optionally override the default logger (e.g. to silence it, etc)
     */
    logger?: Sanity.Codegen.Logger;
}
/**
 * Given a source file as a string, this function will extract the queries and
 * their corresponding query keys.
 *
 * In order for a GROQ query to be plucked/extracted, the expression must match
 * the form:
 *
 * ```ts
 * anyCallExpression('QueryKey', groq`*[_type == 'foo']`)
 * ```
 *
 * The first argument of the call expression must be a string literal and the
 * second argument must be a tagged template literal expression with the tag
 * matching the one provided (default is `groq`). The 3rd argument
 * (i.e. query parameters) does not need to be present.
 *
 * For the second argument (the query), there is some limited support for
 * template literals with expressions in them.
 *
 * See [here][0] for more info.
 *
 * This function also accepts an babel options configuration object that is
 * merged with a provided default configuration.
 *
 * [0]: https://github.com/ricokahler/sanity-codegen/tree/alpha/packages/core#expressionsupport
 */
export declare function pluckGroqFromSource({ source, filename, babelOptions: inputBabelOptions, resolvePluckedFile, groqTagName, logger, }: PluckGroqFromSourceOptions): Promise<{
    queryKey: string;
    query: string;
}[]>;
export interface PluckGroqFromFilesOptions {
    /**
     * Specify a glob (powered by
     * [`globby`](https://github.com/sindresorhus/globby)), a list of globs, or a
     * function that returns a list of paths to specify the source files you want
     * to generate types from.
     *
     * If `include` is provided as a function then `exclude` will not be used.
     */
    include: string | string[] | (() => Promise<string[]>);
    /**
     * Specify a glob (powered by
     * [`globby`](https://github.com/sindresorhus/globby)) or a list of globs to
     * specify which source files you want to exclude from type generation.
     */
    exclude: string | string[];
    /**
     * Specify the root used to resolve relative filenames.
     * By default this is `process.env.cwd()`
     */
    root?: string;
    babelOptions?: Record<string, unknown>;
    /**
     * optionally override the default logger (e.g. to silence it, etc)
     */
    logger?: Sanity.Codegen.Logger;
}
/**
 * Goes through each specified file and statically plucks groq queries and their
 * corresponding query keys. @see `pluckGroqFromSource` for more info.
 */
export declare function pluckGroqFromFiles({ include, exclude, root, babelOptions, logger, }: PluckGroqFromFilesOptions): Promise<{
    queryKey: string;
    query: string;
}[]>;
//# sourceMappingURL=pluck-groq-from-files.d.ts.map