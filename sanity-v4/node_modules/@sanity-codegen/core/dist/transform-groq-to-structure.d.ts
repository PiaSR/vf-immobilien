/// <reference types="@sanity-codegen/types/extractor" />
/// <reference types="@sanity-codegen/types/core" />
import type { parse } from 'groq-js';
type ExprNode = ReturnType<typeof parse>;
export interface TransformGroqToStructureOptions {
    /**
     * A GROQ AST node from `groq-js`'s `parse` method
     */
    node: ExprNode;
    /**
     * An extracted and normalized schema result from the
     * `@sanity-codegen/extractor` package.
     */
    normalizedSchema: Sanity.SchemaDef.Schema;
    /**
     * An array of scopes. These scopes stack as the GROQ AST is traversed and new
     * contexts are created. This should be an empty array to start with.
     */
    scopes: Sanity.GroqCodegen.StructureNode[];
}
/**
 * Used to transform a GROQ AST (e.g. `ExprNode`) into a `StructureNode`
 */
export declare function transformGroqToStructure({ node, normalizedSchema, scopes, }: TransformGroqToStructureOptions): Sanity.GroqCodegen.StructureNode;
export {};
//# sourceMappingURL=transform-groq-to-structure.d.ts.map