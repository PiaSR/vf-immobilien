/// <reference types="@sanity-codegen/types/core" />
import * as t from '@babel/types';
export interface TransformStructureToTsOptions {
    /**
     * The input `StructureNode` to be converted to a `TSType`
     */
    structure: Sanity.GroqCodegen.StructureNode;
    substitutions: {
        [hash: string]: t.TSType;
    };
}
/**
 * Takes in a `StructureNode` and returns an object with the resulting main
 * the type, `query`, as well as any named references created (necessary when
 * the schema has self-reference). Those references are stored in an object
 * keyed by that node's hash.
 *
 * The resulting `TSType`s can be printed to source code via `@babel/generator`.
 *
 * @see `generateTypes` for a reference implementation
 */
export declare function transformStructureToTs({ structure, substitutions, }: TransformStructureToTsOptions): {
    tsType: t.TSType;
    substitutions: {
        [k: string]: t.TSTypeReference;
    };
    declarations: {
        [k: string]: t.TSModuleDeclaration;
    };
};
//# sourceMappingURL=transform-structure-to-ts.d.ts.map