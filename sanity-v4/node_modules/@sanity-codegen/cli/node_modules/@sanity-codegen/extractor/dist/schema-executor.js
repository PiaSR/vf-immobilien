"use strict";

var _path = _interopRequireDefault(require("path"));
var _register = _interopRequireDefault(require("@babel/register"));
var _babelMerge = _interopRequireDefault(require("babel-merge"));
var _sanity = require("sanity");
var _core = require("@sanity-codegen/core");
var _defaultBabelOptions = require("./default-babel-options");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// @ts-expect-error no types or 3rd party types

// @ts-expect-error no types or 3rd party types

const jsdomDefaultHtml = `<!doctype html>
<html>
  <head><meta charset="utf-8"></head>
  <body></body>
</html>`;
async function loadAndExecute() {
  const {
    sanityConfigPath,
    babelOptions: babelOptionsFromArgs,
    babelrcPath,
    cwd
  } = await new Promise(resolve => {
    process.on('message', message => {
      resolve(JSON.parse(message));
    });
  });
  const babelConfigFromBabelrcPath = (() => {
    if (!babelrcPath) return {};
    const requiredBabelrc = require(babelrcPath);
    return requiredBabelrc.default || requiredBabelrc;
  })();
  (0, _register.default)({
    ...(0, _babelMerge.default)(_defaultBabelOptions.defaultBabelOptions, (0, _babelMerge.default)(babelOptionsFromArgs || {}, babelConfigFromBabelrcPath)),
    cwd
  });
  require('jsdom-global')(jsdomDefaultHtml, {
    url: 'http://localhost:3333/'
  });
  const sanityConfig =
  // this executes the schema using the previously configured babel to shim
  // out browser requirements
  require(_path.default.resolve(sanityConfigPath)).default || require(_path.default.resolve(sanityConfigPath));
  const workspaces = await new Promise((resolve, reject) => {
    const subscription = (0, _sanity.resolveConfig)(sanityConfig).subscribe({
      next: workspaces => {
        subscription.unsubscribe();
        resolve(workspaces);
      },
      error: reject
    });
  });
  if (!workspaces.length) {
    throw new Error('Expected at one workspace.');
  }
  for (const workspace of workspaces) {
    if (!workspace.name) {
      throw new Error('Expected all workspaces to have a `name`');
    }
  }
  const result = workspaces.map(workspace => {
    try {
      return (0, _core.schemaNormalizer)({
        name: workspace.name,
        types: workspace.schema._original?.types || [],
        // this is true here to prevent serialization errors
        omitOriginalNode: true
      });
    } catch (e) {
      const error = new Error(`Failed to normalize workspace \`${workspace.name}\`. ${e}`);
      error.cause = e;
      throw error;
    }
  });
  if (!result.length) {
    throw new Error(`Sanity config did not have any workspaces.`);
  }
  return result;
}
loadAndExecute().then(result => {
  const executorResult = {
    status: 'success',
    result
  };
  process.send(JSON.stringify(executorResult));
  process.exitCode = 0;
}).catch(e => {
  const executorResult = {
    status: 'error',
    error: JSON.stringify({
      message: e?.message,
      stack: e?.stack
    }, null, 2)
  };
  process.send(JSON.stringify(executorResult));
  process.exitCode = 1;
});