"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileWalker = fileWalker;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _register = _interopRequireWildcard(require("@babel/register"));
var _extractor = require("@sanity-codegen/extractor");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// @ts-expect-error no types for this

// Note: @babel/register must be hooked prior to this file running because this
// resolving method uses `require.resolve`.
/**
 * Given a starting point and a back up filename, this function will first check
 * to see if there is a file at the starting point. If so it will return the
 * resolved version of that file.
 *
 * Otherwise it will walk up the file tree looking for the given filename if a
 * file was not found at the starting point.
 */
async function fileWalker({
  startingPoint,
  filenameIfNotFound
}) {
  // enables require.resolve to find `.ts` extensions
  (0, _register.default)(_extractor.defaultBabelOptions);
  const resolvedRoot = _path.default.resolve(startingPoint);
  const stats = await _fs.default.promises.stat(resolvedRoot);

  // if the resolved root already references a file, don't walk up the tree
  // looking for the filename
  if (!stats.isDirectory()) return require.resolve(resolvedRoot);
  async function find(pathname) {
    try {
      return require.resolve(`${pathname}/${filenameIfNotFound}`);
    } catch {
      const currentFolder = _path.default.resolve(pathname, './');
      const parentFolder = _path.default.resolve(pathname, '../');
      if (currentFolder === parentFolder) return null;
      return await find(parentFolder);
    }
  }
  const result = await find(resolvedRoot);
  (0, _register.revert)();
  return result;
}