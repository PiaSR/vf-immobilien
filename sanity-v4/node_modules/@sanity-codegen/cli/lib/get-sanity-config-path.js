"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSanityConfigPath = getSanityConfigPath;
var _path = _interopRequireDefault(require("path"));
var _errors = require("@oclif/errors");
var _fileWalker = require("./file-walker");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
async function getSanityConfigPath({
  config,
  args,
  root,
  logger
}) {
  if (args.sanityConfigPath) {
    try {
      const resolvedSanityConfigPath = require.resolve(_path.default.resolve(process.cwd(), args.sanityConfigPath));
      logger.info(`Using sanity config at: ${_path.default.relative(root, resolvedSanityConfigPath)}`);
      return resolvedSanityConfigPath;
    } catch {
      throw new _errors.CLIError(`Could not resolve \`sanityConfigPath\` ${args.sanityConfigPath} provided via CLI args.`);
    }
  }
  if (config?.sanityConfigPath) {
    try {
      const resolvedSanityConfigPath = require.resolve(_path.default.resolve(process.cwd(), config.sanityConfigPath));
      logger.info(`Using sanity config at: ${_path.default.relative(root, resolvedSanityConfigPath)}`);
      return resolvedSanityConfigPath;
    } catch {
      throw new _errors.CLIError(`Could not resolve \`sanityConfigPath\` "${config.sanityConfigPath}" provided via the config.`);
    }
  }
  const sanityConfigPath = await (0, _fileWalker.fileWalker)({
    filenameIfNotFound: 'sanity.config',
    startingPoint: root
  });
  if (sanityConfigPath) {
    logger.info(`Using sanity config at: ${_path.default.relative(root, sanityConfigPath)}`);
  }
  if (!sanityConfigPath) {
    throw new _errors.CLIError(`Failed to find sanityConfigPath. No config path was provided through CLI args, ` + `configs, and no sanity.config.ts was found.`);
  }
  return sanityConfigPath;
}